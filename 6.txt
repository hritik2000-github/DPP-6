TOP VIEW:

  vector<int> topView(Node *root)
    {
         vector<vector<int>> vertical;
         vector<int> ans;

        queue<pair<Node*,pair<int,int>>> q;
        map<int,map<int,vector<int>>> mp;

        q.push({root,{0,0}});

        while(!q.empty()){
            auto p = q.front();
            q.pop();

            Node* node = p.first;
            int x = p.second.first;
            int y = p.second.second;
            mp[x][y].push_back(node->data);
            if(node->left){
                q.push({node->left,{x - 1,y + 1}});
            }
            if(node->right){
                q.push({node->right,{x + 1,y + 1}});
            }
        }
        for(auto k : mp){
            vector<int> col;
            for(auto l : k.second){
               col.insert(col.end(),l.second.begin(),l.second.end());
            }
            vertical.push_back(col);
        }
        for(int i = 0;i < vertical.size();i++){
            ans.push_back(vertical[i][0]);
        }
        return ans;
    }



BOTTOM VIEW:

vector <int> bottomView(Node *root) {
        vector<int> ans;
        
        queue<pair<Node*,int>> q;
        map<int,int> mp;
        
        q.push({root,0});
        
        while(!q.empty()){
            auto p = q.front();
            q.pop();
            
            Node* node = p.first;
            int column = p.second;
            
            mp[column] = node->data;
            
            if(node->left)q.push({node->left,column-1});
            if(node->right)q.push({node->right,column+1});
        }
        for(auto it : mp){
            ans.push_back(it.second);
        }
        return ans;
    }