LEFT VIEW:

vector<int> leftView(Node *root)
{
   vector<int> ans;
   if(root == NULL)return ans;
   
   queue<pair<Node*,int>> q;
   map<int,int> mp;
   
   q.push({root,0});
   
   
   while(!q.empty()){
       auto p = q.front();
       q.pop();
       
       Node* node = p.first;
       int level = p.second;
       
       if(mp.find(level) == mp.end())mp[level] = node->data;
       
       if(node->left)q.push({node->left,level+1});
       if(node->right)q.push({node->right,level+1});
   }
   for(auto it : mp){
       ans.push_back(it.second);
   }
   return ans;
}




RIGHT VIEW:

vector<int> rightView(Node *root)
    {
       vector<int> ans;
       
       if(root == NULL)return ans;
       
       queue<pair<Node*,int>> q;
       map<int,int> mp;
       
       q.push({root,0});
       
       while(!q.empty()){
           auto p = q.front();
           q.pop();
           
           Node* node = p.first;
           int level = p.second;
           
           mp[level] = node->data;
           
           if(node->left)q.push({node->left,level+1});
           if(node->right)q.push({node->right,level+1});
       }
       for(auto it : mp){
           ans.push_back(it.second);
       }
       
       return ans;
    }

